# Date is a timestamptz string timestamp
scalar Timestamptz

type Post {
  id: ID!
  featureImage: PostImage
  title: String!
  subtitle: String!
  slug: String!
  body: String!
  category: String
  tags: [String!]!
  author: User
  createdAt: Timestamptz!
  updatedAt: Timestamptz
  publishedAt: Timestamptz
  hidden: Boolean
  views: Int
  featured: Boolean
}

type User {
  id: ID!
  name: String
  username: String
  email: String
  password: String
  admin: Boolean
  created_at: Timestamptz!
  updated_at: Timestamptz
  userImage: UserImage
}

interface Image {
  id: ID!
  imageID: ID!
  link: String!
  deleteHash: String
  createdAt: Timestamptz!
  name: String!
  type: String!
  width: Int!
  height: Int!
  base64Blur: String!
}

type PostImage implements Image {
  id: ID!
  postID: ID!
  imageID: ID!
  link: String!
  deleteHash: String
  createdAt: Timestamptz!
  name: String!
  type: String!
  userID: ID
  width: Int!
  height: Int!
  base64Blur: String!
}

type UserImage implements Image {
  id: ID!
  userID: ID!
  imageID: ID!
  link: String!
  deleteHash: String
  createdAt: Timestamptz!
  name: String!
  type: String!
  width: Int!
  height: Int!
  base64Blur: String!
}

input getPosts {
  maxID: Int!
}

input getPostByID {
  postID: Int!
}

input getPostBySlug {
  slug: String!
}

type Posts {
  total: Int!
  posts: [Post!]!
  pageInfo: PageInfo!
}

# Information regarding pagination
type PageInfo {
  total: Int!
  perPage: Int!
  hasNextPage: Boolean!
}

type Query {
  postByID(id: ID!): Post!
  postBySlug(slug: String!): Post!
  posts(first: Int = 5, after: String): Posts!
  editorPosts(first: Int = 5, after: String): Posts!
}

